/* Lexical Part */

// ## Characters
//

// An arbitrary ASCII character except null (0x00), new lines (0x0A), carriage
// return (0x0D), apostrophe (0x27), double quote (0x22) and backslash (0x5C).
_ascii_char
	: '\x01' - '\x09'
	| '\x0B' - '\x0C'
	| '\x0E' - '\x21'
	| '\x23' - '\x26'
	| '\x28' - '\x5B'
	| '\x5D' - '\x7F'
;

_ascii_letter : 'a' - 'z' | 'A' - 'Z' ;
_ascii_digit  : '0' - '9' ;

// ## Letters and digits
//

_letter        : _ascii_letter | '_' ;
_decimal_digit : _ascii_digit ;
_decimals      : _decimal_digit { _decimal_digit } ;

// # Lexical elements
//

// ## Comments
//

_line_comment
	: '/' '/' { . } '\n'
	// TODO: Implement proper support for preprocess directive.
	| '#'  { . } '\n'
;
_block_comment : '/' '*' { . | '*' } '*' '/' ;
!comment       : _line_comment | _block_comment ;


// ## Tokens
//

// White space, formed from spaces (0x20), horizontal tabs (0x09), new line
// (line-feed (0x0A) or carriage-return (0x0D)), vertical tabs (0x0B), and form-
// feeds (0x0C) (ยง6.4), is ignored except as it separates tokens that would
// otherwise combine into a single token.
!whitespace : ' ' | '\t' | '\v' | '\f' | '\r' | '\n' ;

// ## Identifiers
//

ident : _letter { _letter | _decimal_digit } ;

// ## Integer literals
//

int_lit : _decimals ;

// ## Character literals
//

_escaped_char : '\\' 'n' ;
char_lit      : '\'' ( _ascii_char | '"' | _escaped_char ) '\'' ;

demoid : 'a'-'z' {'a'-'z'} ;

// !whitespace : ' ' | '\t' | '\n' | '\r' ;

/* Syntax Part */

<< import "dust/ast" >>

Hello:  "hello" demoid << ast.NewWorld($1) >> ;

Ispub: empty | "pub";

Receiver: empty | "(" ident ")" << >> ;

FnDecl: Ispub "fn" Receiver ident "(" ")" << >> ;

StructDecl: Ispub "struct" ident "{" "}" <<>> ;

Cinclude: "#include" "<" ">" ;

CfnDecl: "fn" "C." ident "()" ident ;

VarDecl: "var" ident ident ;



